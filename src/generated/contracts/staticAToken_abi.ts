/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Contract,
  Overrides,
  AddTransactionResponse,
  Invocation,
  EstimateFeeResponse,
} from "starknet";
import type { BigNumberish } from "starknet/utils/number";
import type BN from "bn.js";
import type { BlockIdentifier } from "starknet/provider/utils";

export type Uint256 = { low: BigNumberish; high: BigNumberish };
export type Uint256Output = { low: BN; high: BN };

export type Wad = { wad: Uint256 };
export type WadOutput = { wad: Uint256Output };

export interface staticAToken_abi extends Contract {
  set_l2_bridge(
    l2_bridge: BigNumberish,
    options?: Overrides
  ): Promise<AddTransactionResponse>;
  get_last_update(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[Uint256Output] & { block_number: Uint256Output }>;
  name(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { name: BN }>;
  symbol(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { symbol: BN }>;
  totalSupply(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[Uint256Output] & { totalSupply: Uint256Output }>;
  decimals(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { decimals: BN }>;
  balanceOf(
    account: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Uint256Output] & { balance: Uint256Output }>;
  allowance(
    owner: BigNumberish,
    spender: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Uint256Output] & { remaining: Uint256Output }>;
  initialize_static_a_token(
    name: BigNumberish,
    symbol: BigNumberish,
    decimals: BigNumberish,
    initial_supply: Uint256,
    recipient: BigNumberish,
    owner: BigNumberish,
    l2_bridge: BigNumberish,
    options?: Overrides
  ): Promise<AddTransactionResponse>;
  transfer(
    recipient: BigNumberish,
    amount: Uint256,
    options?: Overrides
  ): Promise<AddTransactionResponse>;
  transferFrom(
    sender: BigNumberish,
    recipient: BigNumberish,
    amount: Uint256,
    options?: Overrides
  ): Promise<AddTransactionResponse>;
  approve(
    spender: BigNumberish,
    amount: Uint256,
    options?: Overrides
  ): Promise<AddTransactionResponse>;
  increaseAllowance(
    spender: BigNumberish,
    added_value: Uint256,
    options?: Overrides
  ): Promise<AddTransactionResponse>;
  decreaseAllowance(
    spender: BigNumberish,
    subtracted_value: Uint256,
    options?: Overrides
  ): Promise<AddTransactionResponse>;
  mint(
    recipient: BigNumberish,
    amount: Uint256,
    options?: Overrides
  ): Promise<AddTransactionResponse>;
  burn(
    account: BigNumberish,
    amount: Uint256,
    options?: Overrides
  ): Promise<AddTransactionResponse>;
  claim_rewards(
    recipient: BigNumberish,
    options?: Overrides
  ): Promise<AddTransactionResponse>;
  push_rewards_index(
    block_number: Uint256,
    rewards_index: Wad,
    options?: Overrides
  ): Promise<AddTransactionResponse>;
  get_rewards_index(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[WadOutput] & { rewards_index: WadOutput }>;
  get_user_rewards_index(
    user: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Uint256Output] & { user_rewards_index: Uint256Output }>;
  get_user_claimable_rewards(
    user: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Uint256Output] & { user_claimable_rewards: Uint256Output }>;
  functions: {
    set_l2_bridge(
      l2_bridge: BigNumberish,
      options?: Overrides
    ): Promise<AddTransactionResponse>;
    get_last_update(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Uint256Output] & { block_number: Uint256Output }>;
    name(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { name: BN }>;
    symbol(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { symbol: BN }>;
    totalSupply(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Uint256Output] & { totalSupply: Uint256Output }>;
    decimals(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { decimals: BN }>;
    balanceOf(
      account: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { balance: Uint256Output }>;
    allowance(
      owner: BigNumberish,
      spender: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { remaining: Uint256Output }>;
    initialize_static_a_token(
      name: BigNumberish,
      symbol: BigNumberish,
      decimals: BigNumberish,
      initial_supply: Uint256,
      recipient: BigNumberish,
      owner: BigNumberish,
      l2_bridge: BigNumberish,
      options?: Overrides
    ): Promise<AddTransactionResponse>;
    transfer(
      recipient: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Promise<AddTransactionResponse>;
    transferFrom(
      sender: BigNumberish,
      recipient: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Promise<AddTransactionResponse>;
    approve(
      spender: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Promise<AddTransactionResponse>;
    increaseAllowance(
      spender: BigNumberish,
      added_value: Uint256,
      options?: Overrides
    ): Promise<AddTransactionResponse>;
    decreaseAllowance(
      spender: BigNumberish,
      subtracted_value: Uint256,
      options?: Overrides
    ): Promise<AddTransactionResponse>;
    mint(
      recipient: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Promise<AddTransactionResponse>;
    burn(
      account: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Promise<AddTransactionResponse>;
    claim_rewards(
      recipient: BigNumberish,
      options?: Overrides
    ): Promise<AddTransactionResponse>;
    push_rewards_index(
      block_number: Uint256,
      rewards_index: Wad,
      options?: Overrides
    ): Promise<AddTransactionResponse>;
    get_rewards_index(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[WadOutput] & { rewards_index: WadOutput }>;
    get_user_rewards_index(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { user_rewards_index: Uint256Output }>;
    get_user_claimable_rewards(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { user_claimable_rewards: Uint256Output }>;
  };
  callStatic: {
    set_l2_bridge(
      l2_bridge: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    get_last_update(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Uint256Output] & { block_number: Uint256Output }>;
    name(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { name: BN }>;
    symbol(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { symbol: BN }>;
    totalSupply(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Uint256Output] & { totalSupply: Uint256Output }>;
    decimals(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { decimals: BN }>;
    balanceOf(
      account: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { balance: Uint256Output }>;
    allowance(
      owner: BigNumberish,
      spender: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { remaining: Uint256Output }>;
    initialize_static_a_token(
      name: BigNumberish,
      symbol: BigNumberish,
      decimals: BigNumberish,
      initial_supply: Uint256,
      recipient: BigNumberish,
      owner: BigNumberish,
      l2_bridge: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    transfer(
      recipient: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { success: BN }>;
    transferFrom(
      sender: BigNumberish,
      recipient: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { success: BN }>;
    approve(
      spender: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { success: BN }>;
    increaseAllowance(
      spender: BigNumberish,
      added_value: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { success: BN }>;
    decreaseAllowance(
      spender: BigNumberish,
      subtracted_value: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { success: BN }>;
    mint(
      recipient: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    burn(
      account: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    claim_rewards(
      recipient: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    push_rewards_index(
      block_number: Uint256,
      rewards_index: Wad,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    get_rewards_index(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[WadOutput] & { rewards_index: WadOutput }>;
    get_user_rewards_index(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { user_rewards_index: Uint256Output }>;
    get_user_claimable_rewards(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { user_claimable_rewards: Uint256Output }>;
  };
  populateTransaction: {
    set_l2_bridge(l2_bridge: BigNumberish, options?: Overrides): Invocation;
    get_last_update(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Invocation;
    name(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    symbol(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    totalSupply(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    decimals(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    balanceOf(
      account: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    allowance(
      owner: BigNumberish,
      spender: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    initialize_static_a_token(
      name: BigNumberish,
      symbol: BigNumberish,
      decimals: BigNumberish,
      initial_supply: Uint256,
      recipient: BigNumberish,
      owner: BigNumberish,
      l2_bridge: BigNumberish,
      options?: Overrides
    ): Invocation;
    transfer(
      recipient: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Invocation;
    transferFrom(
      sender: BigNumberish,
      recipient: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Invocation;
    approve(
      spender: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Invocation;
    increaseAllowance(
      spender: BigNumberish,
      added_value: Uint256,
      options?: Overrides
    ): Invocation;
    decreaseAllowance(
      spender: BigNumberish,
      subtracted_value: Uint256,
      options?: Overrides
    ): Invocation;
    mint(
      recipient: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Invocation;
    burn(
      account: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Invocation;
    claim_rewards(recipient: BigNumberish, options?: Overrides): Invocation;
    push_rewards_index(
      block_number: Uint256,
      rewards_index: Wad,
      options?: Overrides
    ): Invocation;
    get_rewards_index(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Invocation;
    get_user_rewards_index(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    get_user_claimable_rewards(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
  };
  estimateFee: {
    set_l2_bridge(
      l2_bridge: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    get_last_update(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    name(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    symbol(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    totalSupply(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    decimals(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    balanceOf(
      account: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    allowance(
      owner: BigNumberish,
      spender: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    initialize_static_a_token(
      name: BigNumberish,
      symbol: BigNumberish,
      decimals: BigNumberish,
      initial_supply: Uint256,
      recipient: BigNumberish,
      owner: BigNumberish,
      l2_bridge: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    transfer(
      recipient: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    transferFrom(
      sender: BigNumberish,
      recipient: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    approve(
      spender: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    increaseAllowance(
      spender: BigNumberish,
      added_value: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    decreaseAllowance(
      spender: BigNumberish,
      subtracted_value: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    mint(
      recipient: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    burn(
      account: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    claim_rewards(
      recipient: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    push_rewards_index(
      block_number: Uint256,
      rewards_index: Wad,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    get_rewards_index(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    get_user_rewards_index(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    get_user_claimable_rewards(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
  };
}
